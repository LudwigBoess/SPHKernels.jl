"""
    kernel_value( k::AbstractSPHKernel, h_inv::Real, 
                  x·µ¢::Real, x‚±º::Real )

Computes the value of the kernel `k` at the position of the neighbour `x‚±º`. 

``W(\\vec{x}_i - \\vec{x}_j, h_i)``
"""
function kernel_value( k::AbstractSPHKernel, h_inv::Real, 
                       x·µ¢::Real, x‚±º::Real ) 
    
    u  = abs(x·µ¢ - x‚±º)*h_inv

    ùí≤(k, u, h_inv)
end

"""
    kernel_value( k::AbstractSPHKernel, h_inv::Real, 
                  x·µ¢::Union{Real, Vector{<:Real}}, 
                  x‚±º::Union{Real, Vector{<:Real}} )

Computes the value of the kernel `k` at the position of the neighbour `x‚±º`. 

``W(\\vec{x}_i - \\vec{x}_j, h_i)``
"""
function kernel_value( k::AbstractSPHKernel, h_inv::Real, 
                       x·µ¢::Vector{<:Real}, x‚±º::Vector{<:Real} )
    
    u  = get_r(x·µ¢, x‚±º) * h_inv

    ùí≤(k, u, h_inv)
end


"""
    ùíú( k::AbstractSPHKernel, h_inv::Real, 
        x·µ¢::Vector{<:Real},   x‚±º::Vector{<:Real},
        A·µ¢::Vector{<:Real},   A‚±º::Vector{<:Real},
        m‚±º::Real,             œÅ‚±º::Real )

Compute the contribution of particle `j` to the SPH quantity `A` for particle `i`.

See e.g. Price 2012:
``\\vec{A}_i(x) ‚âà \\sum_j m_j \\frac{\\vec{A}_j}{\\rho_j} W(\\vec{x}_i - \\vec{x}_j, h_i)``
"""
ùí≤( k::AbstractSPHKernel, h_inv::Real, 
    x·µ¢::Union{Real, Vector{<:Real}}, 
    x‚±º::Union{Real, Vector{<:Real}}) = kernel_value( k, h_inv, x·µ¢, x‚±º)

"""
    kernel_quantity( k::AbstractSPHKernel, h_inv::Real, 
                     x·µ¢::Vector{<:Real},   x‚±º::Vector{<:Real},
                     A‚±º::Vector{<:Real},
                     m‚±º::Real,             œÅ‚±º::Real )

Compute the contribution of particle `j` to the SPH quantity `A` for particle `i`.
Based on Euclidean distance `r` between the particles. 
Useful if many quantities need to be computed for the same particle pair.

``\\vec{A}_i(x) ‚âà \\sum_j m_j \\frac{\\vec{A}_j}{\\rho_j} W(\\vec{x}_i - \\vec{x}_j, h_i)``
"""
function kernel_quantity( k::AbstractSPHKernel, 
                          r::Real, h_inv::Real, 
                          A‚±º::Union{Real, Vector{<:Real}},
                          m‚±º::Real,             œÅ‚±º::Real ) 
                 
    mj_wk = m‚±º / œÅ‚±º * ùí≤(k, r*h_inv, h_inv)

    map(A‚±º) do Aj
        mj_wk * Aj
    end
end


"""
    kernel_quantity( k::AbstractSPHKernel, h_inv::Real, 
                     x·µ¢::Vector{<:Real},   x‚±º::Vector{<:Real},
                     A‚±º::Vector{<:Real},
                     m‚±º::Real,             œÅ‚±º::Real )

Compute the contribution of particle `j` to the SPH quantity `A` for particle `i`.
Based on positions `x·µ¢` and `x‚±º`.

``\\vec{A}_i(x) ‚âà \\sum_j m_j \\frac{\\vec{A}_j}{\\rho_j} W(\\vec{x}_i - \\vec{x}_j, h_i)``
"""
function kernel_quantity( k::AbstractSPHKernel, h_inv::Real, 
                 x·µ¢::Union{Real, Vector{<:Real}}, 
                 x‚±º::Union{Real, Vector{<:Real}},
                 A‚±º::Union{Real, Vector{<:Real}},
                 m‚±º::Real,             œÅ‚±º::Real )
                 
    mj_wk = m‚±º / œÅ‚±º * kernel_value( k, h_inv, x·µ¢, x‚±º)

    map(A‚±º) do Aj
        mj_wk * Aj
    end
end


"""
    ùíú( k::AbstractSPHKernel, h_inv::Real, 
        x·µ¢::Vector{<:Real},   x‚±º::Vector{<:Real},
        A‚±º::Vector{<:Real},
        m‚±º::Real,             œÅ‚±º::Real )

Compute the contribution of particle `j` to the SPH quantity `A` for particle `i`.
Based on positions `x·µ¢` and `x‚±º`.

``\\vec{A}_i(x) ‚âà \\sum_j m_j \\frac{\\vec{A}_j}{\\rho_j} W(\\vec{x}_i - \\vec{x}_j, h_i)``
"""
ùíú( k::AbstractSPHKernel, h_inv::Real, 
    x·µ¢::Union{Real, Vector{<:Real}}, 
    x‚±º::Union{Real, Vector{<:Real}},
    A‚±º::Union{Real, Vector{<:Real}},
    m‚±º::Real,             œÅ‚±º::Real ) = kernel_quantity( k, h_inv, x·µ¢, x‚±º, A‚±º, m‚±º, œÅ‚±º)


"""
    ùíú( k::AbstractSPHKernel, 
        r::Real,  h_inv::Real, 
        A‚±º::Union{Real, Vector{<:Real}},
        m‚±º::Real, œÅ‚±º::Real )

Compute the contribution of particle `j` to the SPH quantity `A` for particle `i`.
Based on Euclidean distance `r` between the particles. 
Useful if many quantities need to be computed for the same particle pair.

``\\vec{A}_i(x) ‚âà \\sum_j m_j \\frac{\\vec{A}_j}{\\rho_j} W(r, h_i)``
"""
ùíú( k::AbstractSPHKernel, 
    r::Real,  h_inv::Real, 
    A‚±º::Union{Real, Vector{<:Real}},
    m‚±º::Real, œÅ‚±º::Real ) = kernel_quantity( k, r, h_inv, A‚±º, m‚±º, œÅ‚±º)