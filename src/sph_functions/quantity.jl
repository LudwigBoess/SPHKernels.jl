"""
    kernel_value( k::AbstractSPHKernel, h_inv::Real, 
                  x·µ¢::Real, x‚±º::Real )

Computes the value of the kernel `k` at the position of the neighbour `x‚±º`. 

``W(x_i - x_j, h_i)``
"""
function kernel_value( k::AbstractSPHKernel, h_inv::Real, 
                       x·µ¢::Real, x‚±º::Real ) 
    
    u  = abs(x·µ¢ - x‚±º)*h_inv

    ùí≤(k, u, h_inv)
end

"""
    kernel_value( k::AbstractSPHKernel, h_inv::T1, 
                       x·µ¢::T2, x‚±º::T2 ) where {T1,T2}

Computes the value of the kernel `k` at the position of the neighbour `x‚±º`. 

``W(\\vec{x}_i - \\vec{x}_j, h_i)``
"""
function kernel_value( k::AbstractSPHKernel, h_inv::T1, 
                       x·µ¢::T2, x‚±º::T2 ) where {T1,T2}
    
    u  = get_r(x·µ¢, x‚±º) * h_inv

    ùí≤(k, u, h_inv)
end


"""
    ùí≤( k::AbstractSPHKernel, h_inv, x·µ¢, x‚±º)

Computes the value of the kernel `k` at the position of the neighbour `x‚±º`. 

``W(\\vec{x}_i - \\vec{x}_j, h_i)``
"""
ùí≤( k::AbstractSPHKernel, h_inv, x·µ¢, x‚±º) = kernel_value( k, h_inv, x·µ¢, x‚±º)

"""
    kernel_quantity(k::AbstractSPHKernel, r::T1, h_inv::T1, 
                    A‚±º::T2, m‚±º::T1, œÅ‚±º::T1 ) where {T1,T2}

Compute the contribution of particle `j` to the SPH quantity `A` for particle `i`.
Based on Euclidean distance `r` between the particles. 
Useful if many quantities need to be computed for the same particle pair.

``\\vec{A}_i(x) ‚âà \\sum_j m_j \\frac{\\vec{A}_j}{\\rho_j} W(\\vec{x}_i - \\vec{x}_j, h_i)``
"""
function kernel_quantity( k::AbstractSPHKernel, r::T1, h_inv::T1, 
                          A‚±º::T2, m‚±º::T1, œÅ‚±º::T1 ) where {T1,T2}
                 
    mj_wk = m‚±º / œÅ‚±º * ùí≤(k, r*h_inv, h_inv)

    map(A‚±º) do Aj
        mj_wk * Aj
    end
end


"""
    kernel_quantity(k::AbstractSPHKernel, h_inv::T1, 
                    x·µ¢::T2, x‚±º::T2, A‚±º::T2, m‚±º::T1, œÅ‚±º::T1 ) where {T1,T2}

Compute the contribution of particle `j` to the SPH quantity `A` for particle `i`.
Based on positions `x·µ¢` and `x‚±º`.

``\\vec{A}_i(x) ‚âà \\sum_j m_j \\frac{\\vec{A}_j}{\\rho_j} W(\\vec{x}_i - \\vec{x}_j, h_i)``
"""
function kernel_quantity(k::AbstractSPHKernel, h_inv::T1, 
                         x·µ¢::T2, x‚±º::T2, A‚±º::Union{T1,T2}, m‚±º::T1, œÅ‚±º::T1 ) where {T1,T2}
                 
    mj_wk = m‚±º / œÅ‚±º * kernel_value( k, h_inv, x·µ¢, x‚±º)

    map(A‚±º) do Aj
        mj_wk * Aj
    end
end


"""
    ùíú(k::AbstractSPHKernel, h_inv, x·µ¢, x‚±º, A‚±º, m‚±º, œÅ‚±º )

Compute the contribution of particle `j` to the SPH quantity `A` for particle `i`.
Based on positions `x·µ¢` and `x‚±º`.

``\\vec{A}_i(x) ‚âà \\sum_j m_j \\frac{\\vec{A}_j}{\\rho_j} W(\\vec{x}_i - \\vec{x}_j, h_i)``
"""
const ùíú = kernel_quantity
